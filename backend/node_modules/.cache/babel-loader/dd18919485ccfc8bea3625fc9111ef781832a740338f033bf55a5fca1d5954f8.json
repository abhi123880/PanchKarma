{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abhi\\\\OneDrive\\\\Desktop\\\\Panchkarma\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useState, useEffect } from \"react\";\n\n// const AuthContext = createContext();\n\n// export function useAuth() {\n//   return useContext(AuthContext);\n// }\n\n// export function AuthProvider({ children }) {\n//   const [user, setUser] = useState(null);\n//   const [loading, setLoading] = useState(true);\n\n//   // Load user from localStorage on mount\n//   useEffect(() => {\n//     const storedUser = localStorage.getItem(\"user\");\n//     if (storedUser) {\n//       try {\n//         setUser(JSON.parse(storedUser));\n//       } catch {\n//         setUser(null);\n//         localStorage.removeItem(\"user\");\n//       }\n//     } else {\n//       setUser(null);\n//     }\n//     setLoading(false);\n//   }, []);\n\n//   // Sign in (replace with real API in production)\n//   const signin = async (email, password) => {\n//     setLoading(true);\n//     // Simulate server check: accept any non-empty email/password\n//     await new Promise((resolve) => setTimeout(resolve, 400));\n//     if (email && password) {\n//       const fakeUser = { email };\n//       setUser(fakeUser);\n//       localStorage.setItem(\"user\", JSON.stringify(fakeUser));\n//       setLoading(false);\n//       return true;\n//     } else {\n//       setLoading(false);\n//       return false;\n//     }\n//   };\n\n//   // Sign out\n//   const signout = () => {\n//     setUser(null);\n//     localStorage.removeItem(\"user\");\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ user, loading, signin, signout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// }\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(() => {\n    const storedUser = localStorage.getItem('user');\n    return storedUser ? JSON.parse(storedUser) : null;\n  });\n  const isSignIn = !!user;\n  const signin = userData => {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n  const signout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser && !user) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isSignIn,\n      signin,\n      signout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"iZSKBR5FIuZcfwVKZnfcxoswVEY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","storedUser","localStorage","getItem","JSON","parse","isSignIn","signin","userData","setItem","stringify","signout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Abhi/OneDrive/Desktop/Panchkarma/client/src/context/AuthContext.jsx"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export function useAuth() {\r\n//   return useContext(AuthContext);\r\n// }\r\n\r\n// export function AuthProvider({ children }) {\r\n//   const [user, setUser] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n\r\n//   // Load user from localStorage on mount\r\n//   useEffect(() => {\r\n//     const storedUser = localStorage.getItem(\"user\");\r\n//     if (storedUser) {\r\n//       try {\r\n//         setUser(JSON.parse(storedUser));\r\n//       } catch {\r\n//         setUser(null);\r\n//         localStorage.removeItem(\"user\");\r\n//       }\r\n//     } else {\r\n//       setUser(null);\r\n//     }\r\n//     setLoading(false);\r\n//   }, []);\r\n\r\n//   // Sign in (replace with real API in production)\r\n//   const signin = async (email, password) => {\r\n//     setLoading(true);\r\n//     // Simulate server check: accept any non-empty email/password\r\n//     await new Promise((resolve) => setTimeout(resolve, 400));\r\n//     if (email && password) {\r\n//       const fakeUser = { email };\r\n//       setUser(fakeUser);\r\n//       localStorage.setItem(\"user\", JSON.stringify(fakeUser));\r\n//       setLoading(false);\r\n//       return true;\r\n//     } else {\r\n//       setLoading(false);\r\n//       return false;\r\n//     }\r\n//   };\r\n\r\n//   // Sign out\r\n//   const signout = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem(\"user\");\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, loading, signin, signout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// }\r\n   \r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    return storedUser ? JSON.parse(storedUser) : null;\r\n  });\r\n\r\n  const isSignIn = !!user;\r\n\r\n  const signin = (userData) => {\r\n    setUser(userData);\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n  };\r\n\r\n  const signout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser && !user) {\r\n      setUser(JSON.parse(storedUser));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isSignIn, signin, signout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACrC,MAAMU,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,OAAOF,UAAU,GAAGG,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,GAAG,IAAI;EACnD,CAAC,CAAC;EAEF,MAAMK,QAAQ,GAAG,CAAC,CAACP,IAAI;EAEvB,MAAMQ,MAAM,GAAIC,QAAQ,IAAK;IAC3BR,OAAO,CAACQ,QAAQ,CAAC;IACjBN,YAAY,CAACO,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACM,SAAS,CAACF,QAAQ,CAAC,CAAC;EACxD,CAAC;EAED,MAAMG,OAAO,GAAGA,CAAA,KAAM;IACpBX,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,IAAI,CAACF,IAAI,EAAE;MACvBC,OAAO,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACjC;EACF,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC;EAEV,oBACEL,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEf,IAAI;MAAEO,QAAQ;MAAEC,MAAM;MAAEI;IAAQ,CAAE;IAAAd,QAAA,EAC9DA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACpB,EAAA,CA9BWF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AAgCzB,OAAO,MAAMwB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM/B,UAAU,CAACK,WAAW,CAAC;AAAA;AAAC0B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}