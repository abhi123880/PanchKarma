{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abhi\\\\OneDrive\\\\Desktop\\\\Panchkarma\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load user from localStorage on mount\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch {\n        setUser(null);\n        localStorage.removeItem(\"user\");\n      }\n    } else {\n      setUser(null);\n    }\n    setLoading(false);\n  }, []);\n\n  // Sign in (replace with real API in production)\n  const signin = async (email, password) => {\n    setLoading(true);\n    // Simulate server check: accept any non-empty email/password\n    await new Promise(resolve => setTimeout(resolve, 400));\n    if (email && password) {\n      const fakeUser = {\n        email\n      };\n      setUser(fakeUser);\n      localStorage.setItem(\"user\", JSON.stringify(fakeUser));\n      setLoading(false);\n      return true;\n    } else {\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // Sign out\n  const signout = () => {\n    setUser(null);\n    localStorage.removeItem(\"user\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      signin,\n      signout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","removeItem","signin","email","password","Promise","resolve","setTimeout","fakeUser","setItem","stringify","signout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Abhi/OneDrive/Desktop/Panchkarma/client/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Load user from localStorage on mount\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem(\"user\");\r\n    if (storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n      } catch {\r\n        setUser(null);\r\n        localStorage.removeItem(\"user\");\r\n      }\r\n    } else {\r\n      setUser(null);\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Sign in (replace with real API in production)\r\n  const signin = async (email, password) => {\r\n    setLoading(true);\r\n    // Simulate server check: accept any non-empty email/password\r\n    await new Promise((resolve) => setTimeout(resolve, 400));\r\n    if (email && password) {\r\n      const fakeUser = { email };\r\n      setUser(fakeUser);\r\n      localStorage.setItem(\"user\", JSON.stringify(fakeUser));\r\n      setLoading(false);\r\n      return true;\r\n    } else {\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Sign out\r\n  const signout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem(\"user\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, signin, signout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n   "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASO,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,OAAOP,UAAU,CAACK,WAAW,CAAC;AAChC;AAACE,EAAA,CAFeD,OAAO;AAIvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACd,IAAI;QACFH,OAAO,CAACM,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;MACjC,CAAC,CAAC,MAAM;QACNH,OAAO,CAAC,IAAI,CAAC;QACbI,YAAY,CAACI,UAAU,CAAC,MAAM,CAAC;MACjC;IACF,CAAC,MAAM;MACLR,OAAO,CAAC,IAAI,CAAC;IACf;IACAE,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACxCT,UAAU,CAAC,IAAI,CAAC;IAChB;IACA,MAAM,IAAIU,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACxD,IAAIH,KAAK,IAAIC,QAAQ,EAAE;MACrB,MAAMI,QAAQ,GAAG;QAAEL;MAAM,CAAC;MAC1BV,OAAO,CAACe,QAAQ,CAAC;MACjBX,YAAY,CAACY,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACF,QAAQ,CAAC,CAAC;MACtDb,UAAU,CAAC,KAAK,CAAC;MACjB,OAAO,IAAI;IACb,CAAC,MAAM;MACLA,UAAU,CAAC,KAAK,CAAC;MACjB,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMgB,OAAO,GAAGA,CAAA,KAAM;IACpBlB,OAAO,CAAC,IAAI,CAAC;IACbI,YAAY,CAACI,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,oBACEhB,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAErB,IAAI;MAAEE,OAAO;MAAEQ,MAAM;MAAES;IAAQ,CAAE;IAAArB,QAAA,EAC7DA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAAC1B,GAAA,CAhDeF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}